#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# manage environment variables


import os
import argparse

from common import color_err


ENVVAR_FPATH = os.path.expanduser(os.path.join('~', '.envvars'))
HIST_PATH = os.path.expanduser(os.path.join('~', '.zsh_history'))

ENVVAR_VAL_START_CHARS = {'~', '/'}


def _filter_and_reverse_envvars(envvars):
    res = {}
    for k, v in envvars.items():
        if v.isdigit():
            continue
        if v.isalpha() and v.islower():
            continue
        if v[0] in ENVVAR_VAL_START_CHARS:
            continue
        res[v.encode()] = f'<${k}>'.encode()
    return res


def cleanup_history(envvars):
    """Cleans up the shell history."""
    bad_env_vals = _filter_and_reverse_envvars(envvars)

    with open(HIST_PATH, 'rb') as fin:
        lines_in = fin.read().split(b'\n')

    lines_out = []
    lines_bad = []
    for line in lines_in:
        if any(e in line for e in bad_env_vals):
            lines_bad.append(line.decode('utf-8'))
            for k, v in bad_env_vals.items():
                line = line.replace(k, v)
        lines_out.append(line)
    if lines_bad:
        print(color_err('Scrubbing\n' + '\n'.join(lines_bad)))

    with open(HIST_PATH, 'wb') as fout:
        fout.write(b'\n'.join(lines_out))


def main():
    """The main function."""
    parser = argparse.ArgumentParser(description='A CLI to manage custom environment variables.')
    parser.add_argument('-d', action='store_true', dest='rm', help='a flag to indicate that the key should be deleted')
    parser.add_argument('key', nargs='?', help='the name of the variable; disallowed if printing all')
    parser.add_argument('value', nargs='?', help='the value of the variable; disallowed if deleting')
    args = parser.parse_args()

    with open(ENVVAR_FPATH, 'r+') as fin:
        fcontent = [e.strip()[7:] for e in fin.readlines()]
        envvars = dict([e.split('=') for e in fcontent])

    key, value = args.key, args.value

    updated = False
    if args.rm:
        if key not in envvars:
            print(color_err('That environment variable does not exist.'))
        else:
            envvars.pop(key)
            updated = True
    else:
        if value is None:
            print('\n'.join(fcontent))
        else:
            if key in envvars:
                if envvars[key] == value:
                    print(color_err('That environment variable already has that value.'))
                else:
                    print(f'Overwriting old value \'{envvars[key]}\'.')
                    envvars[key] = value
                    updated = True
            else:
                envvars[key] = value
                updated = True

    if updated:
        envvarsl = sorted(envvars.items())
        with open(ENVVAR_FPATH, 'w') as fout:
            fout.write('\n'.join([f'export {k}={v}' for k, v in envvarsl]))
        print('Restart the shell for changes to take effect.')

    cleanup_history(envvars)


if __name__ == '__main__':
    main()
