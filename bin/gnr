#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# make a new release or releases on GitHub

import os
import re
import argparse
import subprocess


PDP_BRANCH = 'nuke_pdp'  # todo change to master when this is merged
GRADLE_REGEX = '    compile \'com.github.PlentyAg:{}:{}\'\n'


def bump_version(path=None):
    """Bumps the version of the current repo.

    Returns:
        (tuple(str, str)): The name of the repo that was bumped and the new
            version identifier.
    """
    if path is None:
        path = os.getcwd()

    run_command('git pull --all', path, True)
    commit_msg = run_command('git --no-pager log -n 1 --pretty=format:\'%s\'',
        path)
    commit_hash = run_command('git --no-pager log -n 1 --pretty=format:\'%H\'',
        path)
    old_version = run_command(
        'hub release | grep -oE \'\\d+.\\d+.\\d+(r\\d+)?(p\\d+)?\' | head -n1',
        path).strip()

    new_version = '0.0.0r1'
    if old_version:
        frags = [e for e in re.split('([0-9]+)', old_version) if e]
        frags[-1] = str(int(frags[-1]) + 1)
        new_version = ''.join(frags)

    raw_origin = run_command('git config --get remote.origin.url', path).strip()
    repo = re.match(r'.*?/(.*)\.git', raw_origin).group(1)
    print('Releasing {} {}: "{}"'.format(repo, new_version, commit_msg))
    run_command('hub release create -p -t "{}" -m "{}" {}'
        .format(commit_hash, commit_msg, new_version), path)
    run_command('git pull', path, True)

    return repo, new_version


def run_command(cmd, path, verbose=False):
    """Runs a command in a directory and (maybe) prints the command at the
    output.

    Args:
        cmd (str): The command to run.
        path (str): The path to run it under.
        verbose (bool): Whether to print the command and its results.

    Returns:
        (str): The result of the command.
    """
    if verbose:
        print(cmd)
    result = subprocess.check_output(cmd, cwd=path, shell=True).decode()
    if verbose:
        print(' > ' + result)
    return result


def main():
    """Make a new release or releases on GitHub."""
    parser = argparse.ArgumentParser(
        description='A CLI to make a new release or releases on GitHub.')
    parser.add_argument('-p', dest='release_pdp', action='store_true',
        help='bump a release of the primary PDP as well')

    repo, version = bump_version()

    args = parser.parse_args()
    if not args.release_pdp:
        return

    print('\nSwitching to PDP branch ' + PDP_BRANCH
          + ' and migrating PDP to new version of ' + repo)
    pdp_path = os.path.join(os.environ['WORKSPACE'], 'PlentyDataPipelineUtil')
    run_command('git stash', pdp_path, True)
    orig_branch = run_command('git rev-parse --abbrev-ref HEAD', pdp_path, True)
    run_command('git checkout ' + PDP_BRANCH, pdp_path, True)
    run_command('git pull', pdp_path, True)

    with open('build.gradle', 'r') as fin:
        old_content = fin.readlines()
    line_regex = GRADLE_REGEX.format(repo, '.*')
    new_content = []
    for l in old_content:
        match = re.match(line_regex, l)
        if match is None:
            new_content.append(l)
        else:
            new_content.append(GRADLE_REGEX.format(repo, version))
    with open('build.gradle', 'w') as fout:
        fout.write(''.join(new_content))

    run_command('git commit -a -m "Auto-bumps {} to version {}"'
        .format(repo, version), pdp_path, True)
    run_command('git push', pdp_path, True)
    bump_version(pdp_path)

    run_command('git checkout ' + orig_branch, pdp_path, True)
    run_command('git stash pop', pdp_path, True)


if __name__ == '__main__':
    main()
