#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# decide path to cd intelligently


import os
from os import path
import argparse

from termcolor import colored

from common import RpclIOManager


ORDERED_ENVVAR_DIRS_TO_CHECK = [
    'WORKSPACE',
    'DESKTOP'
]


def check_parent_for_prefixes(dparent, dprefix):
    """Checks a given directory to see if it contains the given prefix; if so,
    asks the user for input as to which is intended.

    Args:
        dparent (str): The path of the parent directory.
        dprefix (str): The prefix of the internal directory.
    Returns:
        (str): The path found, or None if none exist.
    """
    possible_suffixes = [e for e in os.listdir(dparent) if e.startswith(dprefix) and path.isdir(path.join(dparent, e))]
    if len(possible_suffixes) == 0:
        return None

    for i, suffix in enumerate(possible_suffixes, 1):
        rpcl_print('[{}]: {}'.format(i, colored(suffix, 'blue')))
    rpcl_print('[{}]: {}'.format(len(possible_suffixes) + 1, colored('None', 'red')))

    while True:
        try:
            choice = int(rpcl_input()) - 1
            if not 0 <= choice <= len(possible_suffixes):
                continue
            break
        except ValueError:
            continue

    if choice == len(possible_suffixes):
        return None
    return os.path.join(dparent, possible_suffixes[choice])


def main():
    """The main function."""
    parser = argparse.ArgumentParser(description='A CLI to change directories intelligently, then list the contents.')
    parser.add_argument('dir', nargs='*', help='the name or prefix of the directory')
    parser = RpclIOManager(parser)
    args = parser.parse_args()

    dname = path.expanduser(' '.join(args.dir))
    if dname == '':
        rpcl_exit(path.expanduser('~'))

    dparents = [os.getcwd()] + [os.environ[e] for e in ORDERED_ENVVAR_DIRS_TO_CHECK]

    for i, dparent in enumerate(dparents):
        if i != 0:
            rpcl_print('Checking in ' + colored(dparent, 'blue'))

        dpath = path.abspath(path.join(dparent, dname))
        if path.exists(dpath):
            rpcl_exit(dpath)

        dpath = check_parent_for_prefixes(dparent, dname)
        if dpath is not None:
            rpcl_exit(dpath)

    rpcl_print(colored('Could not find ', 'red') + colored(dname, 'blue'))
    rpcl_exit('.')

    parser.close()


if __name__ == '__main__':
    main()
